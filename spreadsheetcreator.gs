/*/Global variables that control the functions, 
1. Must update current year and create new spreadsheet when the new year comes
2. Must be updated if man hour subjects change, use function GenerateDicFromSpreadSheet at the bottom of this page to do so/*/
var manHourLogSheet = SpreadsheetApp.openByUrl("") //<Input the url of the empty Google Spreadsheet created
var currentYear = "2022"

//The following variables must be adjusted when trying to create Summary Sheets
var summarySheet = manHourLogSheet.getSheetByName("SummarySheet")
var startingSheet = "2/6"
var startMonth = "1"
var startDate = "6"

//This two variables are based on the current date as of the moment you are creating the sheet
var currentSheet = "2/27"
var currentDate = "2/28"

//The following two variables must be synced with all the data sheets at all times
//When the user wants to add or remove certain subjects you need to update both variables and all data sheets
// manHourRows can be generated by GenerateDicFromSpreadSheet at the bottom of the page instead of manual typing
var titles = ["sleep", "brush_teeth", "toilet", "shower", "breakfast", "lunch", "dinner",
  "break", "pre_sleep_rest", "running", "reading", "weight_training", "journaling",
  "reflection", "periodic_planning", "body_maintenance", "house_cleaning", "studying", "video_lecture", 
  "active_recall", "active_practise", "programming", "cooking_prep", "cooking", "planning", 
  "errands", "general_tasking", "gatherings", "work", "bb", "travelling", "relax", 
  "transition", "instagram", "games", "shows"]
var manHourRows = { "sleep": 2,
  "brush_teeth": 3,
  "toilet": 4,
  "shower": 5,
  "breakfast": 6,
  "lunch": 7,
  "dinner": 8,
  "break": 9,
  "pre_sleep_rest": 10,
  "running": 11,
  "reading": 12,
  "weight_training": 13,
  "journaling": 14,
  "reflection": 15,
  "periodic_planning": 16,
  "body_maintenance": 17,
  "house_cleaning": 18,
  "studying": 19,
  "video_lecture": 20,
  "active_recall": 21,
  "active_practise": 22,
  "programming": 23,
  "cooking_prep": 24,
  "cooking": 25,
  "planning": 26,
  "errands": 27,
  "general_tasking": 28,
  "gatherings": 29,
  "work": 30,
  "bb": 31,
  "travelling": 32,
  "relax": 33,
  "transition": 34,
  "instagram": 35,
  "games": 36,
  "shows": 37 }
  var q1Formula = summarySheet.getDataRange().getCell(16, 12).getValue()
  var q2Formula = summarySheet.getDataRange().getCell(16, 13).getValue()
  var q3Formula = summarySheet.getDataRange().getCell(16, 14).getValue()
  var q4Formula = summarySheet.getDataRange().getCell(16, 15).getValue()

//Start of chunks for data sheet creation
//Function to delete date sheets for all dates starting from manual set date
//Must change date before using
function deleteSheets(){
  var date = new Date()
  date.setTime(date.getTime() + (1000*60*60*13))
  date.setMonth(3)
  date.setDate(17)
  var excelFile = manHourLogSheet
  for(var nowDate = date; nowDate.getFullYear() == currentYear; nowDate.setDate(nowDate.getDate()+7)){
    excelFile.deleteSheet(excelFile.getSheetByName((nowDate.getMonth()+1) + "/" + nowDate.getDate()))
  }
}

//Starts to create date data sheets starting from the checkpoint
//Must change checkpoint date before using
//The reason the checkpoint dates exist is because Google Apps Script has a max run time
//The run time stops the program before all sheets are generated
//Hence we need to run this function multiple times and start from the date last left off
function createAllDateSheets(){
  var checkpoint = new Date()
  checkpoint.setMonth(10)
  checkpoint.setDate(13)
  for(nowDate = checkpoint; nowDate.getFullYear() == currentYear ; nowDate.setDate(nowDate.getDate()+7)){
    createDateSheet(nowDate)
  }
  sendMessage(chat_id, "All sheets has been created")
}

//Function is called by createAllDateSheets which will be more commonly used
//Adjust this function to change what is within each date data sheet
//This function should only be called if you want to create 1 sheet specifically
//Set the date with commented code to create individual sheet
function createDateSheet(date){
  var excelFile = manHourLogSheet;
  // var date = new Date()
  // date.setDate(20)
  var date1 = new Date()
  var date2 = new Date()
  var date3 = new Date()
  var date4 = new Date()
  var date5 = new Date()
  var date6 = new Date()
  date1.setMonth(date.getMonth())
  date2.setMonth(date.getMonth())
  date3.setMonth(date.getMonth())
  date4.setMonth(date.getMonth())
  date5.setMonth(date.getMonth())
  date6.setMonth(date.getMonth())
  date1.setDate(date.getDate() + 1)
  date2.setDate(date.getDate() + 2)
  date3.setDate(date.getDate() + 3)
  date4.setDate(date.getDate() + 4)
  date5.setDate(date.getDate() + 5)
  date6.setDate(date.getDate() + 6)
  excelFile.insertSheet((date.getMonth()+1) + "/" + date.getDate())
  
  var newSheet = excelFile.getSheetByName((date.getMonth()+1) + "/" + date.getDate())
  newSheet.appendRow([, 
  (date.getMonth()+1) + "/" + date.getDate(),
  (date1.getMonth()+1) + "/" + date1.getDate(), 
  (date2.getMonth()+1) + "/" + date2.getDate(),
  (date3.getMonth()+1) + "/" + date3.getDate(),
  (date4.getMonth()+1) + "/" + date4.getDate(), 
  (date5.getMonth()+1) + "/" + date5.getDate(), 
  (date6.getMonth()+1) + "/" + date6.getDate(), 
  "Total"])
  
  var titles = ["sleep", "brush_teeth", "toilet", "shower", "breakfast", "lunch", "dinner",
  "break", "pre_sleep_rest", "running", "reading", "weight_training", "journaling",
  "reflection", "periodic_planning", "body_maintenance", "house_cleaning", "studying", "video_lecture", 
  "active_recall", "active_practise", "programming", "cooking_prep", "cooking", "planning", 
  "errands", "general_tasking", "gatherings", "work", "bb", "travelling", "relax", 
  "transition", "instagram", "games", "shows"]
  titles.forEach((value, index) => appendDataRow(newSheet, value, index + 2))
  newSheet.appendRow(["Total:", 
  "=SUM(B2:B37)",
  "=SUM(C2:C37)",
  "=SUM(D2:D37)",
  "=SUM(E2:E37)",
  "=SUM(F2:F37)",
  "=SUM(G2:G37)",
  "=SUM(H2:H37)",
  "=SUM(I2:I37)"])
  newSheet.appendRow(["SUMMARY",,,,"Total",, "Average/Day"])
  newSheet.appendRow(["Biological:", "=INT(SUM(I2:I10)/60)", "=SUM(I2:I10) - INT(SUM(I2:I10)/60) * 60", "Sleep", "=INT(SUM(I2)/60)", "=SUM(I2) - INT(SUM(I2)/60) * 60", "=INT(SUM(I2)/60/7)", "=SUM(I2)/7 - INT(SUM(I2)/60/7) * 60"])
  newSheet.appendRow([,,,"Breakfast:", "=INT(SUM(I6)/60)", "=SUM(I6) - INT(SUM(I6)/60) * 60", "=INT(SUM(I6)/60/7)", "=SUM(I6)/7 - INT(SUM(I6)/60/7) * 60"])
  newSheet.appendRow([,,,"Lunch:", "=INT(SUM(I7)/60)", "=SUM(I7) - INT(SUM(I7)/60) * 60", "=INT(SUM(I7)/60/7)", "=SUM(I7)/7 - INT(SUM(I7)/60/7) * 60"])
  newSheet.appendRow([,,,"Dinner:", "=INT(SUM(I8)/60)", "=SUM(I8) - INT(SUM(I8)/60) * 60", "=INT(SUM(I8)/60/7)", "=SUM(I8)/7 - INT(SUM(I8)/60/7) * 60"])
  newSheet.appendRow(["Productive Time:", "=INT(SUM(I11:I31)/60)", "=SUM(I11:I31) - INT(SUM(I11:I31)/60) * 60", "Routine:", "=INT(SUM(I11:I14)/60)", "=SUM(I11:I14) - INT(SUM(I11:I14)/60) * 60", "=INT(SUM(I11:I14)/60/7)", "=SUM(I11:I14)/7 - INT(SUM(I11:I14)/60/7) * 60"])
  newSheet.appendRow([,,,"Periodic:", "=INT(SUM(I15:I18)/60)", "=SUM(I15:I18) - INT(SUM(I15:I18)/60) * 60", "=INT(SUM(I15:I18)/60/7)", "=SUM(I15:I18)/7 - INT(SUM(I15:I18)/60/7) * 60"])
  newSheet.appendRow([,,,"Learning:", "=INT(SUM(I19:I22)/60)", "=SUM(I19:I22) - INT(SUM(I19:I22)/60) * 60", "=INT(SUM(I19:I22)/60/7)", "=SUM(I19:I22)/7 - INT(SUM(I19:I22)/60/7) * 60"])
  newSheet.appendRow([,,,"Programming:", "=INT(SUM(I23)/60)", "=SUM(I23) - INT(SUM(I23)/60) * 60", "=INT(SUM(I23)/60/7)", "=SUM(I23)/7 - INT(SUM(I23)/60/7) * 60"])
  newSheet.appendRow([,,,"Cooking:", "=INT(SUM(I24:I25)/60)", "=SUM(I24:I25) - INT(SUM(I24:I25)/60) * 60", "=INT(SUM(I24:I25)/60/7)", "=SUM(I24:I25)/7 - INT(SUM(I24:I25)/60/7) * 60"])
  newSheet.appendRow([,,,"General:", "=INT(SUM(I26:28)/60)", "=SUM(I26:I28) - INT(SUM(I26:I28)/60) * 60", "=INT(SUM(I26:I28)/60/7)", "=SUM(I26:I28)/7 - INT(SUM(I26:I28)/60/7) * 60"])
  newSheet.appendRow([,,,"Relationships:", "=INT(SUM(I29)/60)", "=SUM(I29) - INT(SUM(I29)/60) * 60", "=INT(SUM(I29)/60/7)", "=SUM(I29)/7 - INT(SUM(I29)/60/7) * 60"])
  newSheet.appendRow([,,,"Work:", "=INT(SUM(I30)/60)", "=SUM(I30) - INT(SUM(I30)/60) * 60", "=INT(SUM(I30)/60/7)", "=SUM(I30)/7 - INT(SUM(I30)/60/7) * 60"])
  newSheet.appendRow([,,,"BB:", "=INT(SUM(I31)/60)", "=SUM(I31) - INT(SUM(I31)/60) * 60", "=INT(SUM(I31)/60/7)", "=SUM(I31)/7 - INT(SUM(I31)/60/7) * 60"])
  newSheet.appendRow(["Down Time:", "=INT(SUM(I32:I34)/60)", "=SUM(I32:I34) - INT(SUM(I32:I34)/60) * 60","Relax:", "=INT(SUM(I33)/60)", "=SUM(I33) - INT(SUM(I33)/60) * 60", "=INT(SUM(I33)/60/7)", "=SUM(I33)/7 - INT(SUM(I33)/60/7) * 60" ])
  newSheet.appendRow([,,,"Transition:", "=INT(SUM(I34)/60)", "=SUM(I34) - INT(SUM(I34)/60) * 60", "=INT(SUM(I34)/60/7)", "=SUM(I34)/7 - INT(SUM(I34)/60/7) * 60"])
  newSheet.appendRow(["Unproductive Time:", "=INT(SUM(I35:I37)/60)", "=SUM(I35:I37) - INT(SUM(I35:I37)/60) * 60", "Games", "=INT(SUM(I36)/60)", "=SUM(I36) - INT(SUM(I36)/60) * 60", "=INT(SUM(I36)/60/7)", "=SUM(I36)/7 - INT(SUM(I36)/60/7) * 60"])
  newSheet.appendRow([,,,"Shows:", "=INT(SUM(I37)/60)", "=SUM(I37) - INT(SUM(I37)/60) * 60", "=INT(SUM(I37)/60/7)", "=SUM(I37)/7 - INT(SUM(I37)/60/7) * 60"])
}

//This function should never be called by the user
//This function is called by createDataSheet to slot in the rows of each individual columns to sum up total hours
function appendDataRow(newSheet, title, row){
    newSheet.appendRow([title, 
  "0",
  "0",
  "0",
  "0",
  "0",
  "0",
  "0",
  "=SUM(B" + row + ":H" + row + ")"])
}
//End of chunk for date data sheets creation



//Start of chunk for Summary Sheet creation//
//This function is called by the user to create the summary sheet only after creating all the date data sheets
function createSummarySheet(){
  var excelFile = manHourLogSheet; 
  excelFile.insertSheet("SummarySheet2")
  var newSheet = excelFile.getSheetByName("SummarySheet2")
  
  newSheet.appendRow(["Start Sheet:", 
  startingSheet,,"0","1","2","3","4","5","6", ,"Q1", "Q2", "Q3", "Q4"])
  newSheet.appendRow(["Current Sheet:", 
  currentSheet,
  "=HLOOKUP(DATEDIF(B2,B3," + '"' + "D" + '"' + "),D1:J2,2)",
  "B","C","D","E","F","G","H"])
  newSheet.appendRow(["Current Date:", 
  currentDate])
  newSheet.appendRow(["Current Time:", 
  "=TIME(,INDIRECT(" + '"' + "'" + '"' + "&B2&" + '"' + "'" + "!" + '"' + "&C2&" + '"' + "38" + '"' + "),)",
  "=INDIRECT(" + '"' + "'" + '"' + "&B2&" + '"' + "'" + "!" + '"' + "&C2&" + '"' + "38" + '"' + ")*60*1000",
  "0"])
  newSheet.appendRow(["Overall Average"])
  newSheet.appendRow([,"Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Average Day"])
  
  titles.forEach((value) => appendAverageWeekRow(newSheet, value, manHourRows[value]))
}

//Function is called by the user twice to add information for average quarter to the sheet in checkpoints after running the function above
//First run the first two commented functions and comment out the last line
//After first two commented functions finish running, comment them out and run the last line
function addQuarterlyAverageToSummarySheet(){
  calculateQuarterCheckpoints()
  summarySheet.appendRow([,"Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Average Day","Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Average Day","Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Average Day","Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Average Day"])
  //titles.forEach((value) => appendAverageQuarterRow(summarySheet, value, manHourRows[value]))
}

//This function should not be called by the user
//Function is called by createSummarySheet to add in chunk to display average time spent on each day of the week
function appendAverageWeekRow(summarySheet, title, number){
  summarySheet.appendRow([title, 
  createAverageWeekValueFunction("B", number),
  createAverageWeekValueFunction("C", number),
  createAverageWeekValueFunction("D", number),
  createAverageWeekValueFunction("E", number),
  createAverageWeekValueFunction("F", number),
  createAverageWeekValueFunction("G", number),
  createAverageWeekValueFunction("H", number),
  "=SUM(B" + (number + 5) + ":H" + (number + 5) + ")/7"])
}

//This function should not be called by the user
//Function is called by appendAverageWeekRow function above to create every function for each cell to calculate average hours
function createAverageWeekValueFunction(letter, number){
  var formula = "=TIME(0, SUM("
  var date = new Date()
  date.setTime(date.getTime() + (1000*60*60*13))
  date.setMonth(startMonth)
  date.setDate(startDate)
  for(var nowDate = date; nowDate.getFullYear() == currentYear ; nowDate.setDate(nowDate.getDate()+7)){
    formula = formula + "IF(DATEVALUE(B3)>DATEVALUE('" + (nowDate.getMonth()+1) + "/" + nowDate.getDate() + "'!" + letter + "1), '" + (nowDate.getMonth()+1) + "/" + nowDate.getDate() + "'!" + letter + number + ", 0),"
  }
  formula = formula + ")/ROUNDDOWN((DATEDIF(DATEVALUE(B1), DATEVALUE(B3), " + '"' + "D" + '"' + ")/7) + IF(DATEVALUE(B3)" + ">INDIRECT(" + '"' + "'" + '"' + "&B2&" + '"' + "'" + "!" + letter + "1" + '"' + "), 1, 0)), 0)"
  return(formula)
}

//This function should not be called by the user
//Function is called by createSummarySheet to add in chunk to display average time spent on each day of the quarter
function appendAverageQuarterRow(summarySheet, title, number){
  summarySheet.appendRow([title, 
  createAverageQuarterValueFunction(summarySheet, 1, "B", number),
  createAverageQuarterValueFunction(summarySheet, 1, "C", number),
  createAverageQuarterValueFunction(summarySheet, 1, "D", number),
  createAverageQuarterValueFunction(summarySheet, 1, "E", number),
  createAverageQuarterValueFunction(summarySheet, 1, "F", number),
  createAverageQuarterValueFunction(summarySheet, 1, "G", number),
  createAverageQuarterValueFunction(summarySheet, 1, "H", number),
  "=SUM(B" + (number + 43) + ":H" + (number + 43) + ")/7",
  createAverageQuarterValueFunction(summarySheet, 2, "B", number),
  createAverageQuarterValueFunction(summarySheet, 2, "C", number),
  createAverageQuarterValueFunction(summarySheet, 2, "D", number),
  createAverageQuarterValueFunction(summarySheet, 2, "E", number),
  createAverageQuarterValueFunction(summarySheet, 2, "F", number),
  createAverageQuarterValueFunction(summarySheet, 2, "G", number),
  createAverageQuarterValueFunction(summarySheet, 2, "H", number),
  "=SUM(J" + (number + 43) + ":P" + (number + 43) + ")/7",
  createAverageQuarterValueFunction(summarySheet, 3, "B", number),
  createAverageQuarterValueFunction(summarySheet, 3, "C", number),
  createAverageQuarterValueFunction(summarySheet, 3, "D", number),
  createAverageQuarterValueFunction(summarySheet, 3, "E", number),
  createAverageQuarterValueFunction(summarySheet, 3, "F", number),
  createAverageQuarterValueFunction(summarySheet, 3, "G", number),
  createAverageQuarterValueFunction(summarySheet, 3, "H", number),
  "=SUM(R" + (number + 43) + ":X" + (number + 43) + ")/7",
  createAverageQuarterValueFunction(summarySheet, 4, "B", number),
  createAverageQuarterValueFunction(summarySheet, 4, "C", number),
  createAverageQuarterValueFunction(summarySheet, 4, "D", number),
  createAverageQuarterValueFunction(summarySheet, 4, "E", number),
  createAverageQuarterValueFunction(summarySheet, 4, "F", number),
  createAverageQuarterValueFunction(summarySheet, 4, "G", number),
  createAverageQuarterValueFunction(summarySheet, 4, "H", number),
  "=SUM(Z" + (number + 43) + ":AF" + (number + 43) + ")/7"])
}

//This function should not be called by the user
//Function is called by appendSummarySheet to create the necessary information for each quarter to run createAverageQuarterValueFunction with minimum iterations
function calculateQuarterCheckpoints(){
  var date = new Date()
  date.setTime(date.getTime() + (1000*60*60*13))
  date.setMonth(startMonth)
  date.setDate(startDate)
  var q1Counter = 0
  var q2Counter = 0
  var q3Counter = 0
  var q4Counter = 0
  var q1formula = "TIME(0, SUM("
  var q2formula = "TIME(0, SUM("
  var q3formula = "TIME(0, SUM("
  var q4formula = "TIME(0, SUM("
  for(var nowDate = date; nowDate.getFullYear() == currentYear ; nowDate.setDate(nowDate.getDate()+7)){
    var qCheckerDate = new Date()
    qCheckerDate.setTime(qCheckerDate.getTime() + (1000*60*60*13))
    qCheckerDate.setMonth(nowDate.getMonth())
    qCheckerDate.setDate(nowDate.getDate())
    if(qCheckerDate.getMonth()+1 >= 1 && qCheckerDate.getMonth() + 1 <= 3){
      q1Counter = q1Counter + 1
      summarySheet.getDataRange().getCell(q1Counter + 1, 12).setValue((qCheckerDate.getMonth() + 1) + "/" + qCheckerDate.getDate())
      q1formula = q1formula + "IF(DATEVALUE(B3)>DATEVALUE('" + (qCheckerDate.getMonth()+1) + "/" + qCheckerDate.getDate() + "'!letter1), '" + (qCheckerDate.getMonth()+1) + "/" + qCheckerDate.getDate() + "'!letternumber, 0),"
    }
    else if(qCheckerDate.getMonth()+1 >= 4 && qCheckerDate.getMonth() + 1 <= 6){
      q2Counter = q2Counter + 1
      summarySheet.getDataRange().getCell(q2Counter + 1, 13).setValue((qCheckerDate.getMonth() + 1) + "/" + qCheckerDate.getDate())
      q2formula = q2formula + "IF(DATEVALUE(B3)>DATEVALUE('" + (qCheckerDate.getMonth()+1) + "/" + qCheckerDate.getDate() + "'!letter1), '" + (qCheckerDate.getMonth()+1) + "/" + qCheckerDate.getDate() + "'!letternumber, 0),"
    }
    else if(qCheckerDate.getMonth()+1 >= 7 && qCheckerDate.getMonth() + 1 <= 9){
      q3Counter = q3Counter + 1
      summarySheet.getDataRange().getCell(q3Counter + 1, 14).setValue((qCheckerDate.getMonth() + 1) + "/" + qCheckerDate.getDate())
      q3formula = q3formula + "IF(DATEVALUE(B3)>DATEVALUE('" + (qCheckerDate.getMonth()+1) + "/" + qCheckerDate.getDate() + "'!letter1), '" + (qCheckerDate.getMonth()+1) + "/" + qCheckerDate.getDate() + "'!letternumber, 0),"
    }
    else if(qCheckerDate.getMonth()+1 >= 10 && qCheckerDate.getMonth() + 1 <= 12){
      q4Counter = q4Counter + 1
      summarySheet.getDataRange().getCell(q4Counter + 1, 15).setValue((qCheckerDate.getMonth() + 1) + "/" + qCheckerDate.getDate())
      q4formula = q4formula + "IF(DATEVALUE(B3)>DATEVALUE('" + (qCheckerDate.getMonth()+1) + "/" + qCheckerDate.getDate() + "'!letter1), '" + (qCheckerDate.getMonth()+1) + "/" + qCheckerDate.getDate() + "'!letternumber, 0),"
    }
  }
  summarySheet.appendRow(["Quarter 1 Average", , ,, q1Counter,,,,,
  "Quarter 2 Average",, , , q2Counter,,,,
  "Quarter 3 Average",, , , q3Counter,,,,
  "Quarter 4 Average",, ,, q4Counter,,,,])
  q1Start = summarySheet.getDataRange().getCell(2, 12).getValue()
  q1Start.setTime(q1Start.getTime() + (1000*60*60*13))
  q1StartDate = '"' + (q1Start.getMonth() + 1) + "/" + q1Start.getDate() + '"'
  q2Start = summarySheet.getDataRange().getCell(2, 13).getValue()
  q2Start.setTime(q2Start.getTime() + (1000*60*60*13))
  q2StartDate = '"' + (q2Start.getMonth() + 1) + "/" + q2Start.getDate() + '"'
  q3Start = summarySheet.getDataRange().getCell(2, 14).getValue()
  q3Start.setTime(q3Start.getTime() + (1000*60*60*13))
  q3StartDate = '"' + (q3Start.getMonth() + 1) + "/" + q3Start.getDate() + '"'
  q4Start = summarySheet.getDataRange().getCell(2, 15).getValue()
  q4Start.setTime(q4Start.getTime() + (1000*60*60*13))
  q4StartDate = '"' + (q4Start.getMonth() + 1) + "/" + q4Start.getDate() + '"'
  q1formula = q1formula + ")/IF(ROUNDDOWN((DATEDIF(DATEVALUE(" + q1StartDate + "), DATEVALUE(B3), " + '"' + "D" + '"' + ")/7) + IF(DATEVALUE(B3)" + ">INDIRECT(" + '"' + "'" + '"' + "&B2&" + '"' + "'" + "!letter1" + '"' + "), 1, 0))>" + q1Counter + ", " + q1Counter + ", ROUNDDOWN((DATEDIF(DATEVALUE(" + q1StartDate + "), DATEVALUE(B3), " + '"' + "D" + '"' + ")/7) + IF(DATEVALUE(B3)" + ">INDIRECT(" + '"' + "'" + '"' + "&B2&" + '"' + "'" + "!letter1" + '"' + "), 1, 0))), 0)"
  q2formula = q2formula + ")/IF(ROUNDDOWN((DATEDIF(DATEVALUE(" + q2StartDate + "), DATEVALUE(B3), " + '"' + "D" + '"' + ")/7) + IF(DATEVALUE(B3)" + ">INDIRECT(" + '"' + "'" + '"' + "&B2&" + '"' + "'" + "!letter1" + '"' + "), 1, 0))>" + q2Counter + " ," + q2Counter + " , ROUNDDOWN((DATEDIF(DATEVALUE(" + q2StartDate + "), DATEVALUE(B3), " + '"' + "D" + '"' + ")/7) + IF(DATEVALUE(B3)" + ">INDIRECT(" + '"' + "'" + '"' + "&B2&" + '"' + "'" + "!letter1" + '"' + "), 1, 0))), 0)"
  q3formula = q3formula + ")/IF(ROUNDDOWN((DATEDIF(DATEVALUE(" + q3StartDate + "), DATEVALUE(B3), " + '"' + "D" + '"' + ")/7) + IF(DATEVALUE(B3)" + ">INDIRECT(" + '"' + "'" + '"' + "&B2&" + '"' + "'" + "!letter1" + '"' + "), 1, 0))>" + q3Counter + ", " + q3Counter + ", ROUNDDOWN((DATEDIF(DATEVALUE(" + q3StartDate + "), DATEVALUE(B3), " + '"' + "D" + '"' + ")/7) + IF(DATEVALUE(B3)" + ">INDIRECT(" + '"' + "'" + '"' + "&B2&" + '"' + "'" + "!letter1" + '"' + "), 1, 0))), 0)"
  q4formula = q4formula + ")/IF(ROUNDDOWN((DATEDIF(DATEVALUE(" + q4StartDate + "), DATEVALUE(B3), " + '"' + "D" + '"' + ")/7) + IF(DATEVALUE(B3)" + ">INDIRECT(" + '"' + "'" + '"' + "&B2&" + '"' + "'" + "!letter1" + '"' + "), 1, 0))> " + q4Counter + ", " + q4Counter + ", ROUNDDOWN((DATEDIF(DATEVALUE(" + q4StartDate + "), DATEVALUE(B3), " + '"' + "D" + '"' + ")/7) + IF(DATEVALUE(B3)" + ">INDIRECT(" + '"' + "'" + '"' + "&B2&" + '"' + "'" + "!letter1" + '"' + "), 1, 0))), 0)"
  summarySheet.getDataRange().getCell(16, 12).setValue(q1formula)
  summarySheet.getDataRange().getCell(16, 13).setValue(q2formula)
  summarySheet.getDataRange().getCell(16, 14).setValue(q3formula)
  summarySheet.getDataRange().getCell(16, 15).setValue(q4formula)
}

//This function should not be called by the user
//Function is called by appendAverageQuarterRow function above to create every function for each cell to calculate average hours in each quarter
function createAverageQuarterValueFunction(summarySheet, quarter, letter, number){
  var formula
  if(quarter == 1){
    formula = "=" + q1Formula
  }
  else if(quarter == 2){
    formula = "=" + q2Formula
  }
  else if(quarter == 3){
    formula = "=" + q3Formula
  }
  else if(quarter == 4){
    formula = "=" + q4Formula
  }
  formula = formula.replace(/letter/g, letter)
  formula = formula.replace(/number/g, number)
  return(formula)
}
//End of chunk for Summary Sheet creation//

//Really niche functions for adjustment uses//
//This function generates the dictionary required at the top of the page for creating summary sheets so the user does not need to manually type the dictionary 
//The data sheet must already be created with all the man hour classifications already typed in
//must adjust startrow and endrow based on current sheet arrangement
function generateDicFromSpreadSheet(startrow, endrow, col){
  startrow = 2
  endrow = 37
  col = 1
  var sheet = manHourLogSheet.getSheetByName(startingSheet)
  var dic = {}
  for(x = startrow; x <= endrow; x ++){
    dic['"' + sheet.getDataRange().getCell(x, col).getValue() + '"'] = x
  }
  console.log(dic)
}